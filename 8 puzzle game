import heapq

initial_state = [[1, 2, 3],
                 [8, 6, 4],
                 [7, 0, 5]]

goal_state = [[1, 2, 3],
              [8, 0, 4],
              [7, 6, 5]]

def is_goal_state(state, goal_state):
  return state == goal_state

def find_blank_tile(state):
  for i in range(3):
    for j in range(3):
      if state[i][j] == 0:
        return i, j

def swap(state, i, j, new_i, new_j):
  new_state = [row[:] for row in state]
  new_state[i][j], new_state[new_i][new_j] = new_state[new_i][new_j], new_
  return new_state

def get_neighbors(state):
  neighbors = []
  i, j = find_blank_tile(state)
  directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] # Up, Down, Left, Right
  for di, dj in directions:
    new_i, new_j = i + di, j + dj
    if 0 <= new_i < 3 and 0 <= new_j < 3:
      neighbors.append(swap(state, i, j, new_i, new_j))
  return neighbors

def heuristic(state, goal_state):
  distance = 0
  for i in range(3):
    for j in range(3):
      if state[i][j] != 0 and state[i][j] != goal_state[i][j]:
        distance += 1
  return distance

def a_star_search(initial_state, goal_state):
  frontier = []
  heapq.heappush(frontier, (0 + heuristic(initial state, goal state), 0,
  pq pp ( , ( ( _ , g _ ), ,
  explored = set()
  explored.add(tuple(tuple(row) for row in initial_state))

while frontier:
  _, cost, current_state, path = heapq.heappop(frontier)
  if is_goal_state(current_state, goal_state):
    return path + [current_state]
  for neighbor in get_neighbors(current_state):
    new_cost = cost + 1
    new_path = path + [current_state]
    if tuple(tuple(row) for row in neighbor) not in explored:
      heapq.heappush(frontier, (new_cost + heuristic(neighbor, go
      explored.add(tuple(tuple(row) for row in neighbor))
  return None

def print_state(state):
  for row in state:
    print(' '.join(map(str, row)))
  print()
def main():
  print("Initial State:")
  print_state(initial_state)
  print("Goal State:")
  print_state(goal_state)

  solution = a_star_search(initial_state, goal_state)

  if solution:
    print("Solution:")
    for step in solution:
      print_state(step)
  else:
    print("No solution found")

if __name__ == "__main__":
main()
